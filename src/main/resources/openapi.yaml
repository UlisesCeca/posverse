openapi: "3.0.1"
info:
  title: API de ejemplo
  version: 1.0.0
paths:
  /products:
    post:
      summary: Creates a product
      operationId: createProduct
      requestBody:
        required: true
        description: "Product creation request"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreationRequestDTO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreationResponseDTO'
  /categories:
    post:
      summary: Creates a category
      operationId: createCategory
      requestBody:
        required: true
        description: "Category creation request"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreationRequestDTO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCreationResponseDTO'
components:
  schemas:
    ProductBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Coke"
          description: "The name of the product"
        salePrice:
          type: number
          format: double
          example: 2.50
          description: "The sale price"
        purchasePrice:
          type: number
          format: double
          example: 0.70
          description: "The purchase price"
        description:
          type: string
          example: "Refreshing drink"
          description: "The description of the product"
        isCompositeProduct:
          type: boolean
          example: true
          description: "If the product is composed by one or more different products"
        isAvailableForSale:
          type: boolean
          example: true
          description: "If the product is available for sale or not"
        stockTracking:
          $ref: '#/components/schemas/StockTracking'
          description: "Information related to the stock"

    ProductCreationRequestDTO:
      allOf:
        - $ref: '#/components/schemas/ProductBase'

    ProductCreationResponseDTO:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
              description: "The ID of the created product"

    CategoryBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Drinks"
          description: "name of the category"

    CategoryCreationRequestDTO:
      allOf:
        - $ref: '#/components/schemas/CategoryBase'

    CategoryCreationResponseDTO:
      allOf:
        - $ref: '#/components/schemas/CategoryBase'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: "The unique identifier of the category"
              example: 1

    StockTracking:
      type: object
      properties:
        mustTrackStock:
          type: boolean
          example: true
          description: "If the product should track the inventory such as the stock"
        stockAmount:
          type: number
          format: double
          example: 102
          description: "The available amount of stock of the product"
        lowStockWarning:
          type: number
          format: double
          example: 24
          description: "The amount at which the user should be warned when the stock amount is equal or lower to"
